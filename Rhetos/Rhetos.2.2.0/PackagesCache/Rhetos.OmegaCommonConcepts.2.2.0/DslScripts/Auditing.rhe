Module Common
{
    ComposableFilterBy LogReader.LoggedItem '(items, repository, parameter) => items
        .Where(item => item.TableName == parameter.TableName && item.ItemId == parameter.ItemId)
        .OrderByDescending(item => item.Created)
        .ThenBy(item => item.ID)';
    
    ComposableFilterBy LogReader.DeletedItems '(items, repository, parameter) => items
        .Where(item => item.TableName == parameter.TableName && item.Action == "Delete")
        .OrderByDescending(item => item.Created)
        .ThenBy(item => item.ID)';

    Parameter LoggedItem
    {
        ShortString TableName;
        Guid ItemId;
    }
    
    Parameter DeletedItems
    {
        ShortString TableName;
    }
    
    Parameter LogEntry
    {
        Guid LogID;
    }
    
    Computed AuditRelatedEvents 'repository => { throw new Rhetos.UserException("Reading Common.AuditRelatedEvents without filter is not permitted. Use filter by Common.LoggedItem."); }'
    {
        Reference Log;
        DateTime Created;
        ShortString Action;
        ShortString TableName;
        Guid ItemId;
        LongString Description;
        
        ShortString ClientUserName; // The user that used web interface. If the event is logged without web context provided, ClientUserName will be the same as SqlUserName.
        ShortString ClientWorkstation; // The computer name of the user that used web interface. If the event is logged without web context provided, ClientWorkstation will be the same as SqlWorkstation.
        
        ShortString Relation;
        LongString Summary;
        
        FilterBy LoggedItem '(repository, parameter) =>
        {
            /*AuditRelatedEvents Load Begin*/
            
            return repository.Common.RelatedEventsSource.Query()
                .Where(item => item.RelatedToTable == parameter.TableName && item.RelatedToItem == parameter.ItemId)
                .ToList()
                .Select(item =>
                {
                    IUserInfo clientInfo = Rhetos.Utilities.SqlUtility.ExtractUserInfo(item.ContextInfo);
                    
                    var relatedEvent = new Common.AuditRelatedEvents
                    {
                        ID = item.ID,
                        LogID = item.LogID,
                        Created = item.Created,
                        Action = item.Action,
                        TableName = item.TableName,
                        ItemId = item.ItemId,
                        Description = item.Description,
                        
                        ClientUserName = clientInfo.UserName ?? item.UserName,
                        ClientWorkstation = clientInfo.Workstation ?? item.Workstation,
                        
                        Relation = item.Relation,
                        Summary = OmegaCommonConcepts.AuditingUtility.GetSummary(item.Action, item.Description)
                    };
                    
                    /*AuditRelatedEvents Load ProcessEvent*/
                    return relatedEvent;
                })
                .OrderByDescending(item => item.Created)
                .ThenBy(item => item.Relation)
                .ThenBy(item => item.TableName)
                .ToArray();
        }';
        
        FilterBy DeletedItems '(repository, parameter) =>
        {
            /*AuditRelatedEvents Load Begin*/
            
            return repository.Common.RelatedEventsSource.Query()
                .Where(item => item.RelatedToTable == parameter.TableName && item.Action == "Delete")
                .ToList()
                .Select(item =>
                {
                    IUserInfo clientInfo = Rhetos.Utilities.SqlUtility.ExtractUserInfo(item.ContextInfo);
                    
                    var relatedEvent = new Common.AuditRelatedEvents
                    {
                        ID = item.ID,
                        LogID = item.LogID,
                        Created = item.Created,
                        Action = item.Action,
                        TableName = item.TableName,
                        ItemId = item.ItemId,
                        Description = item.Description,
                        
                        ClientUserName = clientInfo.UserName ?? item.UserName,
                        ClientWorkstation = clientInfo.Workstation ?? item.Workstation,
                        
                        Relation = item.Relation,
                        Summary = OmegaCommonConcepts.AuditingUtility.GetSummary(item.Action, item.Description)
                    };
                    
                    /*AuditRelatedEvents Load ProcessEvent*/
                    return relatedEvent;
                })
                .OrderByDescending(item => item.Created)
                .ThenBy(item => item.Relation)
                .ThenBy(item => item.TableName)
                .ToArray();
        }';
    }
    
    ExternalReference 'OmegaCommonConcepts.AuditingUtility, OmegaCommonConcepts';
    ExternalReference 'Rhetos.Utilities.IUserInfo, Rhetos.Utilities';
    ExternalReference 'Rhetos.Utilities.SqlUtility, Rhetos.Utilities';
    
    Computed AuditDataModifications 'repository => { throw new Rhetos.UserException("Reading Common.AuditDataModifications without filter is not permitted. Use filter by Common.LoggedItem or Common.Log."); }'
    {
        Reference Log;
        ShortString Property;
        LongString OldValue;
        LongString NewValue;
        Bool Modified;
        
        FilterBy LoggedItem '(repository, parameter, executionContext) =>
        {
            var eventDescriptions = repository.Common.LogReader.Query()
                .Where(item => item.TableName == parameter.TableName && item.ItemId == parameter.ItemId)
                .Select(item => new { item.ID, item.Action, item.Description, item.Created })
                .ToList()
                .Where(item => item.Action == "Update" || item.Action == "Insert" || item.Action == "Delete")
                .OrderByDescending(item => item.Created)
                .ThenBy(item => item.ID)
                .Select(item => new OmegaCommonConcepts.AuditingUtility.EventDescription { LogID = item.ID, Action = item.Action, Description = item.Description })
                .ToList();
                
            string sql = "SELECT Description FROM " + SqlUtility.GetFullName(parameter.TableName + "_CommonLogDescription") + " WHERE ID = "
				+ Rhetos.Utilities.SqlUtility.QuoteGuid(parameter.ItemId);
            string currentItemDescription = "Error: Unknown";
			try
			{
				executionContext.SqlExecuter.ExecuteReader(sql, reader => currentItemDescription = reader.GetString(0));
			}
			catch
			{
				// The currentItemDescription will remain "Error: Unknown" on missing data or missing view (an old entity type that no longer exists).
			}
            
            var result = OmegaCommonConcepts.AuditingUtility.ReconstructDataModifications(eventDescriptions, currentItemDescription);
            return result.Select(item => new Common.AuditDataModifications
                {
                    ID = Guid.NewGuid(),
                    LogID = item.LogID,
                    Property = item.Property,
                    OldValue = item.OldValue,
                    NewValue = item.NewValue,
                    Modified = item.Modified
                }).ToArray();
        }'
        {
            UseExecutionContext;
        }
        
        // Provide only ID property of the Log instance for the filter parameter.
        FilterBy LogEntry '(repository, parameter) =>
        {
            var log = repository.Common.LogReader.Filter(new[] { parameter.LogID.Value }).SingleOrDefault();
            if (log == null)
                throw new Rhetos.UserException("There is no record in Common.Log with ID {0}.", new[] { SqlUtility.GuidToString(parameter.LogID.Value) }, null, null);
            var modifications = repository.Common.AuditDataModifications.Filter(new LoggedItem { TableName = log.TableName, ItemId = log.ItemId });
            return modifications.Where(m => m.LogID == parameter.LogID.Value).ToArray();
        }';
    }
}